--- old/connect-redis/lib/connect-redis.js	2014-04-29 21:12:27.000000000 +0530
+++ new/connect-redis/lib/connect-redis.js	2014-04-29 21:12:47.000000000 +0530
@@ -9,6 +9,7 @@
  */
 
 var redis = require('redis')
+  , eventEmitter = require('events').EventEmitter
   , debug = require('debug')('connect:redis');
 
 /**
@@ -16,6 +17,7 @@
  */
 
 var oneDay = 86400;
+var timerEvent = {};
 
 /**
  * Return the `RedisStore` extending `connect`'s session Store.
@@ -57,6 +59,8 @@
     }
 
     this.ttl =  options.ttl;
+    this.eventEmitter = (null == options.eventEmitter)
+        ? null : options.eventEmitter;
 
     if (options.db) {
       self.client.select(options.db);
@@ -104,6 +108,24 @@
   };
 
   /**
+   * Send event sessionDeleted after maxAge time expires
+   * Note that this event is triggered when maxAge becomes 0, so it may happen
+   * redis has got crashed or got flushed out, so session will get removed from
+   * redis DB. So APP when getting this event, MUST check if the session exists
+   * or not in DB.
+   * @param {eventEmitter} eventEmitter Object passed from client
+   * @param {sid} sessionID created
+   * @param {maxAge} maxAge after which this event should be generated
+   */
+
+  setEventEmitter = function (eventEmitter, sid, maxAge) {
+    var timer = setTimeout(function () {
+      eventEmitter.emit('sessionDeleted', sid);
+    }, maxAge);
+    timerEvent[sid] = timer;
+  }
+
+  /**
    * Commit the given `sess` object associated with the given `sid`.
    *
    * @param {String} sid
@@ -114,6 +136,7 @@
 
   RedisStore.prototype.set = function(sid, sess, fn){
     sid = this.prefix + sid;
+    var eEmitter = this.eventEmitter;
     try {
       var maxAge = sess.cookie.maxAge
         , ttl = this.ttl
@@ -124,6 +147,18 @@
           : oneDay);
 
       debug('SETEX "%s" ttl:%s %s', sid, ttl, sess);
+      /* NOTE: when request comes from web client, for each url, it sets same
+       * session ID, so even for loading icon, frame gif file, it sets same
+       * session id in redis, so we need to set timeout only one time, if the
+       * session id is not already stored in redis
+       */
+      this.client.get(sid, function (err, data) {
+        if (null == data) {
+          if (eEmitter) {
+            setEventEmitter(eEmitter, sid, maxAge);
+          }
+        }
+      });
       this.client.setex(sid, ttl, sess, function(err){
         err || debug('SETEX complete');
         fn && fn.apply(this, arguments);
