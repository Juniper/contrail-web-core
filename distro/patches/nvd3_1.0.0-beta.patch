--- old/nvd3/nv.d3.js	2014-04-28 17:19:38.000000000 +0530
+++ new/nvd3/nv.d3.js	2014-04-28 14:57:18.000000000 +0530
@@ -131,9 +131,9 @@
 
     var container = document.createElement('div');
         container.className = 'nvtooltip ' + (classes ? classes : 'xy-tooltip');
-
+    //Info: Adjusted the vertical space between the tooltip and bubble from 20 to 10
     gravity = gravity || 's';
-    dist = dist || 20;
+    dist = dist || 7;
 
     var body = parentContainer;
     if ( !parentContainer || parentContainer.tagName.match(/g|svg/i)) {
@@ -211,7 +211,8 @@
         var tLeft = tooltipLeft(container);
         var tTop = tooltipTop(container);
         if (tLeft < scrollLeft) left = scrollLeft + 5;
-        if (tLeft + width > windowWidth) left = left - width/2 + 5;
+        //Info:Adjusted the tooltip position incase it is near the window
+        if (tLeft + width > windowWidth) left = left -(tLeft + width - windowWidth )  - 15; //Info:Adjusted the tooltip
         if (scrollTop > tTop) top = scrollTop;
         break;
     }
@@ -3234,6 +3235,7 @@
     , legend = nv.models.legend()
     ;
 
+
   var margin = {top: 30, right: 90, bottom: 50, left: 90}
     , color = nv.utils.defaultColor()
     , width = null
@@ -3401,6 +3403,7 @@
             .attr("transform", "translate(" + availableWidth + ",0)");
       }
 
+
       //------------------------------------------------------------
       // Main Chart Component(s)
 
@@ -3481,7 +3484,6 @@
           chart.update();
       });
 
-
 /*
       legend.dispatch.on('legendMouseover', function(d, i) {
         d.hover = true;
@@ -4516,7 +4518,8 @@
         top = e.pos[1] + ( offsetElement.offsetTop || 0),
         x = xAxis.tickFormat()(lines.x()(e.point, e.pointIndex)),
         y = yAxis.tickFormat()(lines.y()(e.point, e.pointIndex)),
-        content = tooltip(e.series.key, x, y, e, chart);
+        seriesIndex = e.point.series,
+        content = tooltip(e.series[seriesIndex].key, x, y, e, chart);
 
     nv.tooltip.show([left, top], content, null, null, offsetElement);
   };
@@ -9880,6 +9883,16 @@
     , getX         = function(d) { return d.x } // accessor to get the x value
     , getY         = function(d) { return d.y } // accessor to get the y value
     , getSize      = function(d) { return d.size || 1} // accessor to get the point size
+    , getColor     = function(d,i) { 
+                var colors = ["red", "orange", "yellow", "green", "blue"];
+                colors = d3.scale.category10().range();
+                colors =  ['#EFF3FF', '#BDD7E7', '#6BAED6','#3182BD','#08519C'];
+                if($.isNumeric(d.color))
+                    return colors[d.color] || '#08519C'
+                else
+                    //return d.color || '#08519C'
+                    return color(d,i)
+                } // accessor to get the point color
     , getShape     = function(d) { return d.shape || 'circle' } // accessor to get point shape
     , onlyCircles  = true // Set to false to use shapes
     , forceX       = [] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)
@@ -9895,11 +9908,14 @@
     , clipRadius   = function() { return 25 } // function to get the radius for voronoi point clips
     , xDomain      = null // Override x domain (skips the calculation from data)
     , yDomain      = null // Override y domain
+    , xPositive    = false //Set to true to restrict x-axis values to positive
+    , yPositive    = false //Set to true to restrict y-axis values to positive
     , sizeDomain   = null // Override point size domain
     , sizeRange    = null
     , singlePoint  = false
-    , dispatch     = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout')
+    , dispatch     = d3.dispatch('elementClick', 'elementDblClick','elementMouseover', 'elementMouseout')
     , useVoronoi   = true
+    , addDomainBuffer = false
     ;
 
   //============================================================
@@ -9959,24 +9975,60 @@
       z   .domain(sizeDomain || d3.extent(seriesData.map(function(d) { return d.size }).concat(forceSize)))
           .range(sizeRange || [16, 256]);
 
-      // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
-      if (x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1]) singlePoint = true;
+    var xDomainDiff = Math.abs(x.domain()[0]-x.domain()[1]);
+    var yDomainDiff = Math.abs(y.domain()[0]-y.domain()[1]);
+    var bufferPerct = 0.1;
+
+    var minXDomain,minYDomain;
+    // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
+    if (x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1]) singlePoint = true;
+
+    if(singlePoint == true) {
+        minXDomain = x.domain()[0] - x.domain()[0] * 0.01;
+        minYDomain = y.domain()[0] - y.domain()[0] * 0.01;
+    } else {
+        if(x.domain()[0] == 0 || Math.abs(xDomainDiff/x.domain()[0]*100) < 5)
+            minXDomain = x.domain()[0] - Math.abs(x.domain()[0] * 0.05);
+        else    
+            minXDomain = x.domain()[0] - Math.abs(xDomainDiff * bufferPerct);
+        if(y.domain()[0] == 0 || Math.abs(yDomainDiff/y.domain()[0]*100) < 5)
+            minYDomain = y.domain()[0] - Math.abs(y.domain()[0] * 0.05);
+        else
+            minYDomain = y.domain()[0] - Math.abs(yDomainDiff * bufferPerct);
+    }
+    if(xPositive == true && minXDomain < 0)
+        minXDomain = 0;
+    if(yPositive == true && minYDomain < 0)
+        minYDomain = 0;
+    //Info:Adjust the domain such that bubbles are not aligned on the edges in case of more than one point
+    if(addDomainBuffer == true && singlePoint == false && !isNaN(y.domain()[0]) && !isNaN(x.domain()[0])) {
+        if(x.domain()[0] == 0 || Math.abs(xDomainDiff/x.domain()[1]*100) < 5)
+            x.domain([minXDomain, x.domain()[1] + x.domain()[1] * 0.05])
+        else
+            x.domain([minXDomain, x.domain()[1] + xDomainDiff * bufferPerct])
+        if(y.domain()[0] == 0 || Math.abs(yDomainDiff/y.domain()[1]*100) < 5)
+            y.domain([minYDomain, y.domain()[1] + y.domain()[1] * 0.05])
+        else    
+            y.domain([minYDomain, y.domain()[1] + yDomainDiff * bufferPerct])
+    }
+
       if (x.domain()[0] === x.domain()[1])
         x.domain()[0] ?
-            x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])
-          : x.domain([-1,1]);
+            x.domain([minXDomain, x.domain()[1] + x.domain()[1] * 0.01])
+          : x.domain([0,1]);
 
+      //Info:In case of single value,adjust the domain range
       if (y.domain()[0] === y.domain()[1])
         y.domain()[0] ?
-            y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])
-          : y.domain([-1,1]);
+            y.domain([minYDomain, y.domain()[1] + y.domain()[1] * 0.01])
+          : y.domain([0,1]);
 
       if ( isNaN(x.domain()[0])) {
-          x.domain([-1,1]);
+          x.domain([0,1]);
       }
 
       if ( isNaN(y.domain()[0])) {
-          y.domain([-1,1]);
+          y.domain([0,1]);
       }
 
 
@@ -9984,6 +10036,18 @@
       y0 = y0 || y;
       z0 = z0 || z;
 
+
+      //Info: If x/y is non numeric,display those bubbles at bottom-left corner
+      data = $.each(data,function(idx,obj) {
+          data[idx]['values']  = $.map(data[idx]['values'],function(currObj,idx) {
+                if($.isNumeric(currObj['x']) == false)
+                    currObj['x'] = x.domain()[0];
+                if($.isNumeric(currObj['y']) == false)
+                    currObj['y'] = y.domain()[0];
+                return currObj;
+          });
+      });
+
       //------------------------------------------------------------
 
 
@@ -10113,6 +10177,9 @@
                 var series = data[d.series],
                     point  = series.values[d.point];
 
+                //Info:Wait for a second,and dispatch this event only if dblclick event is not triggered
+                window.setTimeout(function() {
+                    if(dblClick == 0) {
                 dispatch.elementClick({
                   point: point,
                   series: series,
@@ -10120,13 +10187,18 @@
                   seriesIndex: d.series,
                   pointIndex: d.point
                 });
+                    } else {
+                        dblClick--;
+                    }
+                },100);
               })
-              .on('mouseover', function(d) {
+              .on('dblclick', function(d) {
+                dblClick = 2;
                 if (needsUpdate) return 0;
                 var series = data[d.series],
                     point  = series.values[d.point];
 
-                dispatch.elementMouseover({
+                dispatch.elementDblClick({
                   point: point,
                   series: series,
                   pos: [x(getX(point, d.point)) + margin.left, y(getY(point, d.point)) + margin.top],
@@ -10134,14 +10206,28 @@
                   pointIndex: d.point
                 });
               })
+              .on('mouseover', function(d) {
+                if (needsUpdate) return 0;
+                if(d.series == null) return 0;
+                var series = data[d.series],
+                      point  = series.values[d.point];
+                dispatch.elementMouseover({
+                  point: point,
+                  series: data,  //info: modified for getting the all the elements in series
+                  pos: [x(getX(point, d.point)) + margin.left, y(getY(point, d.point)) + margin.top],
+                  seriesIndex: d.series,
+                  pointIndex: d.point
+                });
+              })
               .on('mouseout', function(d, i) {
                 if (needsUpdate) return 0;
+                if(d.series == null) return 0;
                 var series = data[d.series],
                     point  = series.values[d.point];
 
                 dispatch.elementMouseout({
                   point: point,
-                  series: series,
+                  series: data, //info: modified for getting the all the elements in series
                   seriesIndex: d.series,
                   pointIndex: d.point
                 });
@@ -10237,7 +10323,8 @@
         points.enter().append('circle')
             .attr('cx', function(d,i) { return x0(getX(d,i)) })
             .attr('cy', function(d,i) { return y0(getY(d,i)) })
-            .attr('r', function(d,i) { return Math.sqrt(z(getSize(d,i))/Math.PI) });
+            .attr('r', function(d,i) { return Math.sqrt(z(getSize(d,i))/Math.PI) })
+            .attr('fill', function(d,i) { return getColor(d,i)});
         points.exit().remove();
         groups.exit().selectAll('path.nv-point').transition()
             .attr('cx', function(d,i) { return x(getX(d,i)) })
@@ -10251,7 +10338,8 @@
         points.transition()
             .attr('cx', function(d,i) { return x(getX(d,i)) })
             .attr('cy', function(d,i) { return y(getY(d,i)) })
-            .attr('r', function(d,i) { return Math.sqrt(z(getSize(d,i))/Math.PI) });
+            .attr('r', function(d,i) { return Math.sqrt(z(getSize(d,i))/Math.PI) })
+            .attr('fill',function(d,i) { return getColor(d,i)});
 
       } else {
 
@@ -10265,7 +10353,7 @@
               d3.svg.symbol()
                 .type(getShape)
                 .size(function(d,i) { return z(getSize(d,i)) })
-            );
+            ).attr('fill',getColor(d,i));
         points.exit().remove();
         d3.transition(groups.exit().selectAll('path.nv-point'))
             .attr('transform', function(d,i) {
@@ -10480,6 +10568,26 @@
     }
     return chart;
   };
+  chart.addDomainBuffer = function(_) {
+    if (!arguments.length) return addDomainBuffer;
+    addDomainBuffer = _;
+    if (addDomainBuffer === false) {
+        addDomainBuffer = false;
+    }
+    return chart;
+  };
+
+  chart.xPositive = function(_) {
+    if (!arguments.length) return xPositive;
+    xPositive = _;
+    return chart;
+  };
+
+  chart.yPositive = function(_) {
+    if (!arguments.length) return yPositive;
+    yPositive = _;
+    return chart;
+  };
 
   chart.clipRadius = function(_) {
     if (!arguments.length) return clipRadius;
@@ -10549,12 +10657,15 @@
     , showDistX    = false
     , showDistY    = false
     , showLegend   = true
+    , showTooltipLines  = true
     , showControls = !!d3.fisheye
     , fisheye      = 0
     , pauseFisheye = false
     , tooltips     = true
     , tooltipX     = function(key, x, y) { return '<strong>' + x + '</strong>' }
     , tooltipY     = function(key, x, y) { return '<strong>' + y + '</strong>' }
+    , tooltipRenderedFn = null
+    , seriesMap = null //Info: seriesMap consists of the mapping between the name of series and number(order)
     //, tooltip      = function(key, x, y) { return '<h3>' + key + '</h3>' }
     , tooltip      = null
     , state = {}
@@ -10602,13 +10713,18 @@
         topY = e.pos[1] + ( offsetElement.offsetTop || 0),
         xVal = xAxis.tickFormat()(scatter.x()(e.point, e.pointIndex)),
         yVal = yAxis.tickFormat()(scatter.y()(e.point, e.pointIndex));
+    var tooltipContainer;
 
       if( tooltipX != null )
-          nv.tooltip.show([leftX, topX], tooltipX(e.series.key, xVal, yVal, e, chart), 'n', 1, offsetElement, 'x-nvtooltip');
+          tooltipContainer = nv.tooltip.show([leftX, topX], tooltipX(e.series.key, xVal, yVal, e, chart), 'n', 1, offsetElement, 'x-nvtooltip');
       if( tooltipY != null )
-          nv.tooltip.show([leftY, topY], tooltipY(e.series.key, xVal, yVal, e, chart), 'e', 1, offsetElement, 'y-nvtooltip');
-      if( tooltip != null )
-          nv.tooltip.show([left, top], tooltip(e.series.key, xVal, yVal, e, chart), e.value < 0 ? 'n' : 's', null, offsetElement);
+          tooltipContainer = nv.tooltip.show([leftY, topY], tooltipY(e.series.key, xVal, yVal, e, chart), 'e', 1, offsetElement, 'y-nvtooltip');
+      if( tooltip != null ) {
+          tooltipContainer = nv.tooltip.show([left, top], tooltip(e, xVal,yVal,chart), e.value < 0 ? 'n' : 's', null, offsetElement);
+      }
+    //Info:tooltiprenderFn which is triggered once the tooltip is rendered
+      if(tooltipRenderedFn != null)
+          tooltipRenderedFn(tooltipContainer,e,chart);
   };
 
   var controlsData = [
@@ -10628,7 +10744,8 @@
           availableHeight = (height || parseInt(container.style('height')) || 400)
                              - margin.top - margin.bottom;
 
-      chart.update = function() { container.transition().call(chart); };
+      //Info:Add a flag to indicate whether it's being loaded for the first time or being updated
+      chart.update = function() { chart.loaded = 1;container.transition().call(chart); };
       // chart.container = this;
 
       //set state.disabled
@@ -10647,8 +10764,20 @@
 
       //------------------------------------------------------------
       // Display noData message if there's nothing to show.
+      var filterData = [];
+      filterData = $.extend(true,[],data);
+      /*
+      if(chart.loaded == 1) {
+          //console.info('Domain being read',chart.xScale().domain(),chart.yScale().domain());
+          scaleData = {x:chart.xScale().domain(),y:chart.yScale().domain()};
+     }
+      //Info:Make a clone of chart data to filterData and filter out the points that are not visible in the given domain
+      filterData[0].values = $.grep(filterData[0]['values'],function(d,idx) {
+          return filterPoints(d,scaleData);
+      });*/
 
-      if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
+      //Info:Disabling all series case won't happen
+      if (!data || !filterData.length || !filterData.filter(function(d) { return d.values.length }).length) {
         var noDataText = container.selectAll('.nv-noData').data([noData]);
 
         noDataText.enter().append('text')
@@ -10661,7 +10790,8 @@
           .attr('y', margin.top + availableHeight / 2)
           .text(function(d) { return d });
 
-        return chart;
+        //Info:To clear the current bubbles and adjust the x/y axis scale,comment the return statement 
+        //return chart;
       } else {
         container.selectAll('.nv-noData').remove();
       }
@@ -10742,20 +10872,46 @@
       //------------------------------------------------------------
       // Main Chart Component(s)
 
+    //Filter out nodes whose x/y is not a number
+    $.each(filterData,function(idx,currSeries) {
+        currSeries['values'] = $.map(currSeries['values'],function(obj,idx) {
+            if($.isNumeric(obj['x']) == true && $.isNumeric(obj['y']) == true) {
+                //&& ($.isNumeric(obj['size']) == true)) {
+                return obj;
+            } else {
+                //return null;
+            /*if($.isNumeric(obj['x']) == false)
+                obj['x'] = chart.xScale().domain()[0];
+            if($.isNumeric(obj['y']) == false)
+                obj['y'] = chart.yScale().domain()[0];*/
+            return obj;
+            }
+        });
+        });
+
+      //Info:Feeding to chart
       scatter
           .width(availableWidth)
           .height(availableHeight)
           .color(data.map(function(d,i) {
             return d.color || color(d, i);
           }).filter(function(d,i) { return !data[i].disabled }))
-          .xDomain(null)
-          .yDomain(null)
-
-      wrap.select('.nv-scatterWrap')
-          .datum(data.filter(function(d) { return !d.disabled }))
-          .call(scatter);
-
-
+          //.xDomain(null)
+          //.yDomain(null)
+          .xDomain(scatter.xDomain())
+          .yDomain(scatter.yDomain())
+
+      var scaleData;
+      //Info:Pass-on x-Domain and y-Domain
+      /*if(chart.loaded == 1) {
+          console.info('set pre-domain',chart.xScale().domain(),chart.yScale().domain());
+          scatter.xDomain(chart.xScale().domain());
+          scatter.yDomain(chart.yScale().domain());
+      }*/
+      logMessage('scatterChart',filterData);
+      $.each(filterData[0]['values'],function(idx,obj) {
+          logMessage('scatterChart','cpu',obj['x'],'memory',obj['y'],'name',obj['name'],'size',obj['size']);
+      });
       //Adjust for x and y padding
       if (xPadding) {
         var xRange = x.domain()[1] - x.domain()[0];
@@ -10767,8 +10923,10 @@
         scatter.yDomain([y.domain()[0] - (yPadding * yRange), y.domain()[1] + (yPadding * yRange)]);
       }
 
+      //Info:Call the superclass with filtered data
       wrap.select('.nv-scatterWrap')
-          .datum(data.filter(function(d) { return !d.disabled }))
+          .datum(filterData.filter(function(d) { 
+             return !d.disabled; }))
           .call(scatter);
 
       //------------------------------------------------------------
@@ -10808,7 +10966,7 @@
             .attr('class', 'nv-distributionX');
         g.select('.nv-distributionX')
             .attr('transform', 'translate(0,' + y.range()[0] + ')')
-            .datum(data.filter(function(d) { return !d.disabled }))
+            .datum(filterData.filter(function(d) { return !d.disabled }))
             .call(distX);
       }
 
@@ -10824,7 +10982,7 @@
             .attr('class', 'nv-distributionY');
         g.select('.nv-distributionY')
             .attr('transform', 'translate(-' + distY.size() + ',0)')
-            .datum(data.filter(function(d) { return !d.disabled }))
+            .datum(filterData.filter(function(d) { return !d.disabled }))
             .call(distY);
       }
 
@@ -10901,6 +11059,7 @@
       legend.dispatch.on('legendClick', function(d,i, that) {
         d.disabled = !d.disabled;
 
+        //Info:If all series are hidden,enable all of them
         if (!data.filter(function(d) { return !d.disabled }).length) {
           data.map(function(d) {
             d.disabled = false;
@@ -10941,11 +11100,15 @@
       */
 
       scatter.dispatch.on('elementMouseover.tooltip', function(e) {
+        if(showTooltipLines) {
+            //Info:Draw a vertical line from selected point to x-axis
         d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)
             .attr('y1', function(d,i) { return e.pos[1] - availableHeight;});
+            //Info:Draw a horizontal line from selected point to y-axis
         d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-disty-' + e.pointIndex)
             .attr('x2', e.pos[0] + distX.size());
-
+        }
+        nv.tooltip.cleanup();
         e.pos = [e.pos[0] + margin.left, e.pos[1] + margin.top];
         dispatch.tooltipShow(e);
       });
@@ -10981,13 +11144,45 @@
     return chart;
   }
 
+  function filterPoints(d,scaleData) {
+    //return the points only in domain
+    if((scaleData != null) && (scaleData['x'] != null)) {
+        var minX = scaleData['x'][0],maxX = scaleData['x'][1];
+        var minY = scaleData['y'][0],maxY = scaleData['y'][1];
+        if((d['x'] >=  minX && d['x'] <= maxX) &&
+            (d['y'] >= minY && d['y'] <= maxY))
+            return true;
+        else
+            return false;
+    } else
+        return true;
+  }
+
 
   //============================================================
   // Event Handling/Dispatching (out of chart's scope)
   //------------------------------------------------------------
 
   scatter.dispatch.on('elementMouseout.tooltip', function(e) {
-    dispatch.tooltipHide(e);
+    //Info:Don't hide the tooltip in case of overlapping bubbles
+   var series = [];
+   for(var i = 0;i < e['series'].length; i++){
+       $.merge(series,e['series'][i]['values']);
+   }
+   var overlappedNodes = e['point']['overlappedNodes'];
+   var overlappedNodeLen  = overlappedNodes instanceof Array ? overlappedNodes.length : 0;
+   //Info: Filter the overlapped nodes from series that are disabled
+   var dataArray = [];
+       for(var i = 0;i < overlappedNodeLen; i++){
+            var data = $.grep(series,function(obj,idx) {
+               return (obj['name'] == overlappedNodes[i]['name'] && obj['type'] == overlappedNodes[i]['type'] && 
+                       !chart.state()['disabled'][chart.seriesMap()[obj['type']]]);
+           });
+           dataArray.push(data)
+       }
+       overlappedNodes = dataArray;
+   if(e['point']['overlappedNodes'] == undefined || overlappedNodes.length <= 1)
+	  dispatch.tooltipHide(e);
 
     d3.select('.nv-chart-' + scatter.id() + ' .nv-series-' + e.seriesIndex + ' .nv-distx-' + e.pointIndex)
         .attr('y1', 0);
@@ -11046,7 +11241,13 @@
     distY.color(color);
     return chart;
   };
-
+  //Info: seriesMap consists of the mapping between the name of series and number(order)
+  chart.seriesMap = function(_){
+      if(!arguments.length) return seriesMap;
+      seriesMap = _;
+      return chart;
+  };
+  
   chart.showDistX = function(_) {
     if (!arguments.length) return showDistX;
     showDistX = _;
@@ -11071,6 +11272,12 @@
     return chart;
   };
 
+  chart.showTooltipLines  = function(_) {
+    if (!arguments.length) return showTooltipLines;
+    showTooltipLines = _;
+    return chart;
+  };
+
   chart.fisheye = function(_) {
     if (!arguments.length) return fisheye;
     fisheye = _;
@@ -11112,6 +11319,13 @@
     tooltipY = _;
     return chart;
   };
+  
+  //Info:tooltiprenderFn which is triggered once the tooltip is rendered
+  chart.tooltipRenderedFn = function(_) {
+    if (!arguments.length) return tooltipRenderedFn;
+    tooltipRenderedFn = _;
+    return chart;
+  };
 
   chart.state = function(_) {
     if (!arguments.length) return state;
