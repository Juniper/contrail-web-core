<!--
 Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
-->

<urlLists>
    <!-- Define module name here which is being referenced in the generated 
         file
     -->
     <require>
        <define>longPoll</define>
        <path>../core/longPolling.api</path>
     </require>
     <require>
        <define>cacheApi</define>
        <path>../core/cache.api</path>
    </require>
    <require>
        <define>rbac</define>
        <path>../core/rbac.api</path>
    </require>
    <require>
        <define>tenantapi</define>
        <path>../api/tenant.api</path>
    </require>
    <require>
        <define>cdbqueryapi</define>
        <path>../api/cdbquery.api</path>
    </require>
    <require>
        <define>adminapi</define>
        <path>../api/admin.api</path>
    </require>
    <require>
        <define>handler</define>
        <path>./handler</path>
    </require>
    <require>
        <define>commonUtils</define>
        <path>../../utils/common.utils</path>
    </require>
    <require>
        <define>globalvrouterconfigapi</define>
        <path>../api/globalvrouterconfig.api</path>
    </require>
    <require>
        <define>vnconfigapi</define>
        <path>../api/vnconfig.api</path>
    </require>
    <require>
        <define>policyconfigapi</define>
        <path>../api/policyconfig.api</path>
    </require>
    <require>
        <define>fipconfigapi</define>
        <path>../api/fipconfig.api</path>
    </require>
    <require>
        <define>projectconfigapi</define>
        <path>../api/projectconfig.api</path>
    </require>
    <require>
        <define>ipamconfigapi</define>
        <path>../api/ipamconfig.api</path>
    </require>
    <require>
        <define>stconfigapi</define>
        <path>../api/servicetemplateconfig.api</path>
    </require>
    <require>
        <define>siconfigapi</define>
        <path>../api/serviceinstanceconfig.api</path>
    </require>
    <require>
        <define>virtualdnsconfigapi</define>
        <path>../api/virtualdnsconfig.api</path>
    </require>
    
    <require>
        <define>qeapi</define>
        <path>../api/qe.api</path>
    </require>
    <require>
        <define>nwMonApi</define>
        <path>../api/network.mon.api</path>
    </require>
    <require>
        <define>global</define>
        <path>../../common/global</path>
    </require>
    <require>
        <define>infra</define>
        <path>../api/infraoverview.api</path>
    </require>
    <require>
        <define>sshapi</define>
        <path>../api/sshcommand.api</path>
    </require>
    <require>
        <define>proxyApi</define>
        <path>../api/proxy.api</path>
    </require>
    <require>
        <define>timeout</define>
        <!-- Available tags for timeout
            timeout         - Request timeout in milli seconds 
            timeoutCallback - Callback to be called once request times out, if
                              not provided, then default callback 
                              defHandleReqTimeout() gets called
         -->
        <path>../../../../lib/request-timeout</path>
    </require>
    <require>
         <define>infra</define>
         <path>../api/infraoverview.api</path>
    </require>
    <item>
        <url>/infra/admin</url>
        <method>get</method>
        <feature>admin-config</feature>
        <callback>handler.admin</callback>
    </item>
    <item>
        <url>/tenants/monitor/network</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>handler.dashboard</callback>
    </item>
    <item>
        <url>/</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>handler.home</callback>
    </item>
    <item>
        <url>/login</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>handler.login</callback>
    </item>
    <item>
        <url>/authenticate</url>
        <method>post</method>
        <feature>monitoring</feature>
        <callback>handler.authenticate</callback>
    </item>
    <item>
        <url>/logout</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>handler.logout</callback>
    </item>
    <item>
        <url>/api/tenants/projects/tree</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>tenantapi.getProjectsTree</callback>
    </item>
    <item>
        <url>/api/tenant/monitoring/topology</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>nwMonApi.getNetworkTopology</callback>
    </item>
    <item>
        <url>/api/tenant/monitoring/network-topology</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>nwMonApi.getNetworkTreeTopology</callback>
    </item>
    <item>
        <url>/api/tenants/projects/:domain</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>tenantapi.getProjects</callback>
    </item>
    <item>
        <url>/api/tenants/project/:project</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>tenantapi.getProject</callback>
    </item>
    <item>
        <url>/api/tenants/project-details/:project</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>tenantapi.getProjectDetails</callback>
    </item>
    <item>
        <url>/api/tenant/networking/project/summary</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>nwMonApi.getProjectSummary</callback>
    </item>
    <item>
        <url>/api/tenants/networks/:fqname</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>tenantapi.getVNetworks</callback>
    </item>
    <item>
        <url>/api/tenants/network/:vn</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>tenantapi.getVNetwork</callback>
    </item>
    <item>
        <url>/api/tenants/vn-traffic/:vnvm</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>tenantapi.getVNVM</callback>
    </item>
    <item>
        <url>/api/admin/nodes/:type</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>adminapi.getControlNodeDetailsFromConfig</callback>
    </item>
    <item>
        <url>/api/admin/virtual-routers/:type</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>adminapi.getVirtualRouters</callback>
    </item>
    <item>
        <url>/api/admin/test-update</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>handler.testUpdate</callback>
    </item>
    <item>
        <url>/api/admin/test-update</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>handler.testUpdate</callback>
    </item>
    <item>
        <url>/api/tenants/virtual-network/:vn</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>tenantapi.getVNState</callback>
    </item>
    <item>
        <url>/api/tenants/virtual-network-details/:vn</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>tenantapi.getVNDetails</callback>
    </item>
    <item>
        <url>/api/tenants/virtual-machine/:vm</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>tenantapi.getVMState</callback>
    </item>
    <item>
        <url>/api/tenants/flow-stat/:st/:et/:svn/:dvn/:direct/:ts</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>tenantapi.getFlowStat</callback>
    </item>
	<item>
        <url>/log-directory</url>
        <method>post</method>
        <feature>monitoring</feature>
        <callback>commonUtils.directory</callback>
    </item>
    <item>
        <url>/download</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>commonUtils.download</callback>
    </item>
    <item>
        <url>/upload/:filename</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>commonUtils.upload</callback>
    </item>
    <item>
        <!-- Get Sandesh Data -->
        <url>/api/admin/monitor/infrastructure/get-sandesh-data</url>
        <method>post</method>
        <feature>monitoring</feature>
        <callback>adminapi.getSandeshData</callback>
    </item>
    <item>
        <url>/api/admin/bgp-routers/:type</url>
        <method>get</method>
        <feature>bgp</feature>
        <callback>adminapi.getBGPRouters</callback>
    </item>
    <item>
        <url>/api/admin/bgp-router/:id</url>
        <method>get</method>
        <feature>bgp</feature>
        <callback>adminapi.getBGPRouter</callback>
    </item>
    <item>
        <url>/api/admin/bgp-router</url>
        <method>post</method>
        <feature>bgp</feature>
        <callback>adminapi.createBGPRouter</callback>
    </item>
    <item>
        <url>/api/admin/bgp-router/:id</url>
        <method>delete</method>
        <feature>bgp</feature>
        <callback>adminapi.deleteBGPRouter</callback>
    </item>
    <item>
        <url>/api/admin/bgp-router/:id</url>
        <method>put</method>
        <feature>bgp</feature>
        <callback>adminapi.updateBGPRouter</callback>
    </item>
    <item>
        <url>/api/admin/test-create</url>
        <method>get</method>
        <feature>bgp</feature>
        <callback>handler.testCreate</callback>
    </item>
    <item>
        <url>/api/admin/analyzers</url>
        <method>get</method>
        <feature>pcapture</feature>
        <callback>adminapi.getAnalyzers</callback>
    </item>
    <item>
        <url>/api/admin/analyzers/:name</url>
        <method>get</method>
        <feature>pcapture</feature>
        <callback>adminapi.getAnalyzer</callback>
    </item>
    <item>
        <url>/api/admin/mirrors</url>
        <method>get</method>
        <feature>pcapture</feature>
        <callback>adminapi.getMirrors</callback>
    </item>
    <item>
        <url>/api/admin/mirrors/:name</url>
        <method>get</method>
        <feature>pcapture</feature>
        <callback>adminapi.getMirror</callback>
    </item>
    <item>
        <url>/api/admin/add-analyzer</url>
        <method>post</method>
        <feature>pcapture</feature>
        <callback>adminapi.addAnalyzer</callback>
    </item>
    <item>
        <url>/api/admin/delete-analyzer/:name</url>
        <method>post</method>
        <feature>pcapture</feature>
        <callback>adminapi.deleteAnalyzer</callback>
    </item>
    <item>
        <url>/api/admin/add-mirror</url>
        <method>get</method>
        <feature>pcapture</feature>
        <callback>adminapi.addMirror</callback>
    </item>
    <item>
        <url>/api/admin/delete-mirror/:name</url>
        <method>post</method>
        <feature>pcapture</feature>
        <callback>adminapi.deleteMirror</callback>
    </item>
    <item>
        <url>/api/admin/networks</url>
        <method>get</method>
        <feature>pcapture</feature>
        <callback>adminapi.getAllVNs</callback>
    </item>
    <item>
        <url>/api/tenants/admin/config/global-asn</url>
        <method>get</method>
        <feature>bgp</feature>
        <callback>adminapi.getGlobalASN</callback>
    </item>
    <item>
        <url>/api/tenants/admin/config/global-asn</url>
        <method>put</method>
        <feature>bgp</feature>
        <callback>adminapi.updateGlobalASN</callback>
    </item>
    <item>
        <url>/api/admin/control-node/:name</url>
        <method>get</method>
        <feature>control-node</feature>
        <callback>adminapi.getControlNode</callback>
    </item>
    <item>
        <!-- Lists the control nodes tree -->
        <url>/api/admin/monitor/infrastructure/controlnodes</url>
        <method>get</method>
        <feature>control-node</feature>
        <callback>adminapi.getControlNodesTree</callback>
    </item>
    <item>
        <!-- Gets summary of all control nodes -->
        <url>/api/admin/monitor/infrastructure/controlnodes/summary</url>
        <method>get</method>
        <feature>control-node</feature>
        <callback>infra.getControlNodesSummary</callback>
    </item>
    <item>
        <!-- Gets summary of all control nodes -->
        <url>/api/admin/monitor/infrastructure/controlnodes/summaryInfo</url>
        <method>get</method>
        <feature>control-node</feature>
        <callback>adminapi.getControlNodesSummary</callback>
    </item>
    <item>
        <!-- Lists the control nodes tree -->
        <url>/api/admin/monitor/infrastructure/controlnode/details</url>
        <method>get</method>
        <feature>control-node</feature>
        <callback>infra.getControlNodeDetails</callback>
    </item>
    <item>
        <!-- Lists the details of control node -->
        <url>/api/admin/monitor/infrastructure/controlnode/bgppeer</url>
        <method>get</method>
        <feature>control-node</feature>
        <callback>infra.getControlNodePeerInfo</callback>
    </item>
    <item>
        <!-- Get bgp-peer list paginated response -->
        <url>/api/admin/monitor/infrastructure/controlnode/paged-bgppeer</url>
        <method>get</method>
        <feature>control-node</feature>
        <callback>infra.getControlNodePeerPagedInfo</callback>
    </item>
    <item>
        <!-- Lists the bgp-peers -->
        <url>/api/admin/monitor/infrastructure/controlnode/peer-list</url>
        <method>get</method>
        <feature>control-node</feature>
        <callback>adminapi.getBgpPeerList</callback>
    </item>
    <item>
        <!-- details of control node bgp-peer -->
        <url>/api/admin/monitor/infrastructure/controlnode/bgppeer-details</url>
        <method>get</method>
        <feature>control-node</feature>
        <callback>infra.getControlNodePeerDetails</callback>
    </item>
    <item>
        <!-- Fills the Peer Source and Routing Instances in Combo Box -->
        <url>/api/admin/monitor/infrastructure/controlnode/routes/rout-inst-list</url>
        <method>get</method>
        <feature>control-node</feature>
        <callback>adminapi.getControlNodeRoutingInstanceList</callback>
    </item>
    <item>
        <!-- Lists the details of control node -->
        <url>/api/admin/monitor/infrastructure/controlnode/bgppeer/detail</url>
        <method>get</method>
        <feature>control-node</feature>
        <callback>adminapi.getControlNodesDetail</callback>
    </item>
    <item>
        <!-- Lists the details of control node
          ?ip=<controlNodeIp>&routingInst=<instName>&routingTable=<tableName>&prefix=<prefix>
        -->
        <url>/api/admin/monitor/infrastructure/controlnode/routes</url>
        <method>get</method>
        <feature>control-node</feature>
        <callback>adminapi.getControlNodeRoutes</callback>
    </item>
    <item>
        <url>/api/admin/monitor/infrastructure/controlnode/sandesh</url>
        <method>get</method>
        <feature>control-node</feature>
        <callback>infra.getControlNodeSandeshRequest</callback>
    </item>
    <item>
        <!-- Lists the compute nodes tree -->
        <url>/api/admin/monitor/infrastructure/vrouters</url>
        <method>get</method>
        <feature>compute-node</feature>
        <callback>adminapi.getComputeNodesTree</callback>
    </item>
    <item>
        <!-- Lists the compute nodes tree -->
        <url>/api/admin/monitor/infrastructure/vrouters/summary</url>
        <method>get</method>
        <feature>compute-node</feature>
        <callback>infra.getvRoutersSummary</callback>
    </item>
    <item>
        <!-- Get compute nodes Summary -->
        <url>/api/admin/monitor/infrastructure/vrouters/cached-summary</url>
        <method>get</method>
        <feature>compute-node</feature>
        <timeout>300000</timeout>
        <callback>infra.getvRoutersSummaryByJob</callback>
    </item>
    <item>
        <!-- Get vRouter Generator Details -->
        <url>/api/admin/monitor/infrastructure/vrouters/cached-generators</url>
        <method>get</method>
        <feature>compute-node</feature>
        <timeout>300000</timeout>
        <callback>infra.getvRouterGenerators</callback>
    </item>
    <item>
        <!-- Lists the compute nodes tree -->
        <url>/api/admin/monitor/infrastructure/vrouters/summaryInfo</url>
        <method>get</method>
        <feature>compute-node</feature>
        <callback>adminapi.getComputeNodesSummary</callback>
    </item>
    <item>
        <!-- Lists the compute nodes tree -->
        <url>/api/admin/monitor/infrastructure/vrouter/details</url>
        <method>get</method>
        <feature>compute-node</feature>
        <callback>infra.getvRouterDetails</callback>
    </item>
    <item>
        <!-- Lists the interface details of compute node -->
        <url>/api/admin/monitor/infrastructure/vrouter/interface</url>
        <method>get</method>
        <feature>compute-node</feature>
        <callback>adminapi.getComputeNodeInterface</callback>
    </item>
    <item>
        <!-- Lists the interface details of compute node -->
        <url>/api/admin/monitor/infrastructure/vrouter/vn</url>
        <method>get</method>
        <feature>compute-node</feature>
        <callback>adminapi.getComputeNodeVN</callback>
    </item>
    <item>
        <!-- Lists the acl details of compute node -->
        <url>/api/admin/monitor/infrastructure/vrouter/acl</url>
        <method>get</method>
        <feature>compute-node</feature>
        <callback>adminapi.getComputeNodeAcl</callback>
    </item>
    <item>
        <!-- Lists the acl details of compute node -->
        <url>/api/admin/monitor/infrastructure/vrouter/flows</url>
        <method>get</method>
        <feature>compute-node</feature>
        <callback>infra.getvRouterFlowsDetail</callback>
    </item>
    <item>
        <url>/api/admin/monitor/infrastructure/vrouter/vrf-list</url>
        <method>get</method>
        <feature>compute-node</feature>
        <callback>adminapi.getvRouterVrfList</callback>
    </item>
    <item>
        <!-- Lists all the UCast entries of vRouter -->
        <url>/api/admin/monitor/infrastructure/vrouter/ucast-routes</url>
        <method>get</method>
        <feature>compute-node</feature>
        <callback>adminapi.getvRouterUCastRoutes</callback>
    </item>
    <item>
        <!-- Lists all the MCast entries of vRouter -->
        <url>/api/admin/monitor/infrastructure/vrouter/mcast-routes</url>
        <method>get</method>
        <feature>compute-node</feature>
        <callback>adminapi.getvRouterMCastRoutes</callback>
    </item>
    <item>
        <!-- Lists all the Layer2 Route entries of vRouter -->
        <url>/api/admin/monitor/infrastructure/vrouter/l2-routes</url>
        <method>get</method>
        <feature>compute-node</feature>
        <callback>adminapi.getvRouterL2Routes</callback>
    </item>
    <item>
        <url>/api/admin/monitor/infrastructure/analyticsnodes</url>
        <method>get</method>
        <feature>analytics-node</feature>
        <callback>infra.getAnalyticsNodeList</callback>
    </item>
    <item>
        <!-- Lists the analytics node summary -->
        <url>/api/admin/monitor/infrastructure/analyticsnodes/summary</url>
        <method>get</method>
        <feature>analytics-node</feature>
        <callback>infra.getAnalyticsNodeSummary</callback>
    </item>
    <item>
        <!-- Lists the analytics node details -->
        <url>/api/admin/monitor/infrastructure/analyticsnode/details</url>
        <method>get</method>
        <feature>analytics-node</feature>
        <callback>infra.getAnalyticsNodeDetails</callback>
    </item>
    <item>
        <!-- Lists the analytics node detail -->
        <url>/api/admin/monitor/infrastructure/analyticsnode/generators</url>
        <method>get</method>
        <feature>analytics-node</feature>
        <callback>infra.getAnalyticsNodeGenerators</callback>
    </item>
    <item>
        <url>/api/admin/monitor/infrastructure/confignodes</url>
        <method>get</method>
        <feature>config-node</feature>
        <callback>infra.getConfigNodesList</callback>
    </item>
    <item>
        <!-- Lists the confignodes summary -->
        <url>/api/admin/monitor/infrastructure/confignodes/summary</url>
        <method>get</method>
        <feature>config-node</feature>
        <callback>infra.getConfigNodesSummary</callback>
    </item>
    <item>
        <!-- Lists the confignode details -->
        <url>/api/admin/monitor/infrastructure/confignode/details</url>
        <method>get</method>
        <feature>config-node</feature>
        <callback>infra.getConfigNodeDetails</callback>
    </item>
    <item>
        <!-- Use cfilt/mfilt/kfilt to get filtered data -->
        <url>/api/tenant/get-data</url>
        <method>post</method>
        <feature>monitoring</feature>
        <callback>infra.getServerResponseByModType</callback>
    </item>

    <!-- API / Feature definition for Global vRouter configuration -->
    <!-- 1. Get Global vRouter configuration -
            /api/tenants/config/global-vrouter-config,
                                                 getGlobalvRouterConfig
         2. Create Global vRouter configuration -
            /api/tenants/config/global-vrouter-configs,
                                                 createGlobalvRouterConfig
         3. Update Forwarding Options of Global vRouter configuration -
            /api/tenants/config/global-vrouter-config/:id/forwarding-options,
                                                 updateForwardingOptions

         4. Update Link Local Services of Global vRouter configuration -
            /api/tenants/config/global-vrouter-config/:id/link-local-services,
                                                 updateLinkLocalService
    -->
    <item>
        <url>/api/tenants/config/global-vrouter-config</url>
        <method>get</method>
        <feature>globalvrouterconfig</feature>
        <callback>globalvrouterconfigapi.getGlobalvRouterConfig</callback>
    </item>
    <item>
        <url>/api/tenants/config/global-vrouter-configs</url>
        <method>post</method>
        <feature>globalvrouterconfig</feature>
        <callback>globalvrouterconfigapi.createGlobalvRouterConfig</callback>
    </item>
    <item>
        <url>/api/tenants/config/global-vrouter-config/:id/forwarding-options</url>
        <method>put</method>
        <feature>globalvrouterconfig</feature>
        <callback>globalvrouterconfigapi.updateForwardingOptions</callback>
    </item>
    <item>
        <url>/api/tenants/config/global-vrouter-config/:id/link-local-services</url>
        <method>put</method>
        <feature>globalvrouterconfig</feature>
        <callback>globalvrouterconfigapi.updateLinkLocalService</callback>
    </item>

    <!-- API / Feature definition for Virtual Network configuration -->
    <!-- 1. List VN's -
            /api/tenants/config/virtual-networks,
                                                 listVirtualNetworks
         2. Get VN -
            /api/tenants/config/virtual-network/:id,
                                                 getVirtualNetwork
         3. Create VN -
            /api/tenants/config/virtual-networks,
                                                 createVirtualNetwork
         4. Delete VN -
            /api/tenants/config/virtual-network/:id,
                                                 deleteVirtualNetwork
         5. Add Subnet -
            /api/tenants/config/virtual-network/:id/ipams
                                                 updateVNSubnetAdd
         6. Delete Subnet -
            /api/tenants/config/virtual-network/:id/ipams
                                                 updateVNSubnetDelete
         7. Add Fip Pool for a VN -
            /api/tenants/config/virtual-network/:id/floatingip-pools
                                                 updateVNFipPoolAdd
         8. Delete Fip Pool for a VN -
            /api/tenants/config/virtual-network/:id/floatingip-pool/:fipid
                                                 updateVNFipPoolDelete
         9. Update Projects of a Fip Pool for a VN -
            /api/tenants/config/virtual-network/:id/floatingip-pool/:fipid
                                                 updateVNFipPoolUpdate
        10. Update Network Policies for a VN -
            /api/tenants/config/virtual-network/:id/network-policys
                                                 updateVNNetPolicies
        11. Update Route Target for a VN -
            /api/tenants/config/virtual-network/:id/route-targets
                                                 updateVNRouteTargets
        12. List Ports for a Project / Tenant
            (VN port list comes in VN Get)
            /api/tenants/config/virtual-machine-interfaces,
                                                 listVirtualMachineInterfaces
        13. Edit Virtual Network attributes
            /api/tenants/config/virtual-network/:id
                                                updateVirtualNetwork
    -->
    <item>
        <url>/api/tenants/config/virtual-networks</url>
        <method>get</method>
        <feature>vnconfig</feature>
        <callback>vnconfigapi.listVirtualNetworks</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-network/:id</url>
        <method>get</method>
        <feature>vnconfig</feature>
        <callback>vnconfigapi.getVirtualNetwork</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-networks</url>
        <method>post</method>
        <feature>vnconfig</feature>
        <callback>vnconfigapi.createVirtualNetwork</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-network/:id</url>
        <method>put</method>
        <feature>vnconfig</feature>
        <callback>vnconfigapi.updateVirtualNetwork</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-network/:id</url>
        <method>delete</method>
        <feature>vnconfig</feature>
        <callback>vnconfigapi.deleteVirtualNetwork</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-network/:id/ipams</url>
        <method>post</method>
        <feature>vnconfig</feature>
        <callback>vnconfigapi.updateVNSubnetAdd</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-network/:id/ipams</url>
        <method>put</method>
        <feature>vnconfig</feature>
        <callback>vnconfigapi.updateVNSubnetDelete</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-network/:id/floatingip-pools</url>
        <method>post</method>
        <feature>vnconfig</feature>
        <callback>vnconfigapi.updateVNFipPoolAdd</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-network/:id/floatingip-pool/:fipid</url>
        <method>delete</method>
        <feature>vnconfig</feature>
        <callback>vnconfigapi.updateVNFipPoolDelete</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-network/:id/floatingip-pool/:fipid</url>
        <method>put</method>
        <feature>vnconfig</feature>
        <callback>vnconfigapi.updateVNFipPoolUpdate</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-network/:id/network-policys</url>
        <method>put</method>
        <feature>vnconfig</feature>
        <callback>vnconfigapi.updateVNNetPolicies</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-network/:id/route-targets</url>
        <method>put</method>
        <feature>vnconfig</feature>
        <callback>vnconfigapi.updateVNRouteTargets</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-machine-interfaces</url>
        <method>get</method>
        <feature>vnconfig</feature>
        <callback>vnconfigapi.listVirtualMachineInterfaces</callback>
    </item>

    <!-- API / Feature definition for Policy configuration -->
    <!-- 1. List Policies -
            /api/tenants/config/policys,
                                                 listPolicys
         2. Get Policy -
            /api/tenants/config/policy/:id,
                                                 getPolicy
         3. Create Policy -
            /api/tenants/config/policys,
                                                 createPolicy
         4. Delete Policy -
            /api/tenants/config/policy/:id,
                                                 deletePolicy
         5. Add Policy Entries -
            /api/tenants/config/policy/:id/network-policy-entries,
                                                 addPolicyEntry
         6. Delete Policy Entries -
            /api/tenants/config/policy/:id/network-policy-entries/:ruleid,
                                                 deletePolicyEntry
         6. Update Policy Associated Networks -
            /api/tenants/config/policy/:id/associated-networks,
                                                 updatePolicyAssociatedNets
         7. Edit Policy -
            /api/tenants/config/policy/:id,      updatePolicy
    -->
    <item>
        <url>/api/tenants/config/policys</url>
        <method>get</method>
        <feature>policyconfig</feature>
        <callback>policyconfigapi.listPolicys</callback>
    </item>
    <item>
        <url>/api/tenants/config/policy/:id</url>
        <method>get</method>
        <feature>policyconfig</feature>
        <callback>policyconfigapi.getPolicy</callback>
    </item>
    <item>
        <url>/api/tenants/config/policys</url>
        <method>post</method>
        <feature>policyconfig</feature>
        <callback>policyconfigapi.createPolicy</callback>
    </item>
    <item>
        <url>/api/tenants/config/policy/:id</url>
        <method>put</method>
        <feature>policyconfig</feature>
        <callback>policyconfigapi.updatePolicy</callback>
    </item>
    <item>
        <url>/api/tenants/config/policy/:id</url>
        <method>delete</method>
        <feature>policyconfig</feature>
        <callback>policyconfigapi.deletePolicy</callback>
    </item>
    <item>
        <url>/api/tenants/config/policy/:id/network-policy-entries</url>
        <method>post</method>
        <feature>policyconfig</feature>
        <callback>policyconfigapi.addPolicyEntry</callback>
    </item>
    <item>
        <url>/api/tenants/config/policy/:id/network-policy-entries/:ruleid</url>
        <method>delete</method>
        <feature>policyconfig</feature>
        <callback>policyconfigapi.deletePolicyEntry</callback>
    </item>

    <item>
        <url>/api/tenants/config/policy/:id/associated-networks</url>
        <method>put</method>
        <feature>policyconfig</feature>
        <callback>policyconfigapi.updatePolicyAssociatedNets</callback>
    </item>

    <!-- API / Feature definition for Floating IP configuration -->
    <!-- 1. List Floating IP - /api/tenants/config/floating-ips/:id,
                                                 listFloatingIps
         2. Create Floating IP - /api/tenants/config/floating-ips,
                                                 createFloatingIp
         3. Delete Floating IP - /api/tenants/config/floating-ip/:id,
                                                 deleteFloatingIp
         4. Update Floating IP - /api/tenants/config/floating-ip/:id,
                                                 updateFloatingIp
         5. List Floating IP Pools - /api/tenants/config/floating-ip-pools/:id,
                                                 lisFloatingIpPools
    -->
    <item>
        <url>/api/tenants/config/floating-ips/:id</url>
        <method>get</method>
        <feature>fipconfig</feature>
        <callback>fipconfigapi.listFloatingIps</callback>
    </item>
    <item>
        <url>/api/tenants/config/floating-ips</url>
        <method>post</method>
        <feature>fipconfig</feature>
        <callback>fipconfigapi.createFloatingIp</callback>
    </item>
    <item>
        <url>/api/tenants/config/floating-ip/:id</url>
        <method>delete</method>
        <feature>fipconfig</feature>
        <callback>fipconfigapi.deleteFloatingIp</callback>
    </item>
    <item>
        <url>/api/tenants/config/floating-ip/:id</url>
        <method>put</method>
        <feature>fipconfig</feature>
        <callback>fipconfigapi.updateFloatingIp</callback>
    </item>
    <item>
        <url>/api/tenants/config/floating-ip-pools/:id</url>
        <method>get</method>
        <feature>fipconfig</feature>
        <callback>fipconfigapi.listFloatingIpPools</callback>
    </item>

    <!-- API / Feature definition for Service Template configuration -->
    <!-- 1. List  - /api/tenants/config/service-templates/:id,
                                                 listServiceTemplates
         2. Create Service Template - /api/tenants/config/service-templates,
                                                 createServiceTemplate
         3. Delete Service Template - /api/tenants/config/service-template/:id,
                                                 deleteServiceTemplate
         4. List Service Template Images - /api/tenants/config/service-template-images/:id,
                                                 listImageNames
    -->
    <item>
        <url>/api/tenants/config/service-templates/:id</url>
        <method>get</method>
        <feature>stconfig</feature>
        <callback>stconfigapi.listServiceTemplates</callback>
    </item>
    <item>
        <url>/api/tenants/config/service-templates</url>
        <method>post</method>
        <feature>stconfig</feature>
        <callback>stconfigapi.createServiceTemplate</callback>
    </item>
    <item>
        <url>/api/tenants/config/service-template/:id</url>
        <method>delete</method>
        <feature>stconfig</feature>
        <callback>stconfigapi.deleteServiceTemplate</callback>
    </item>
    <item>
        <url>/api/tenants/config/service-template-images/:id</url>
        <method>get</method>
        <feature>stconfig</feature>
        <callback>stconfigapi.listServiceTemplateImages</callback>
    </item>
    <item>
        <url>/api/tenants/config/system-flavors</url>
        <method>get</method>
        <feature>stconfig</feature>
        <callback>stconfigapi.getSystemFlavors</callback>
    </item>


    <!-- API / Feature definition for Service Instance configuration -->
    <!-- 1. List  - /api/tenants/config/service-instances/:id,
                                                 listServiceInstances
         2. Create Service Instance - /api/tenants/config/service-instances,
                                                 createServiceInstance
         3. Delete Service Instance - /api/tenants/config/service-instance/:id,
                                                 deleteServiceInstance
         4. List Service Template Images - /api/tenants/config/service-instance-templates/:id,
                                                 listServiceInstanceTemplates
         5. Get VNC Url             - /api/tenants/config/service-instance-vm
                                                 getVNCUrl
    -->
    <item>
        <url>/api/tenants/config/service-instances/:id</url>
        <method>get</method>
        <feature>siconfig</feature>
        <callback>siconfigapi.listServiceInstances</callback>
    </item>
    <item>
        <url>/api/tenants/config/list-service-instances/:id</url>
        <method>get</method>
        <feature>siconfig</feature>
        <callback>siconfigapi.getServiceInstances</callback>
    </item>
    <item>
        <url>/api/tenants/config/service-instances-status/:id</url>
        <method>post</method>
        <feature>siconfig</feature>
        <timeout>900000</timeout>
        <callback>siconfigapi.getServiceInstanceStatusByProject</callback>
    </item>
    <item>
        <url>/api/tenants/config/service-instance/:id</url>
        <method>get</method>
        <feature>siconfig</feature>
        <callback>siconfigapi.getServiceInstance</callback>
    </item>
    <item>
        <url>/api/tenants/config/service-instances</url>
        <method>post</method>
        <feature>siconfig</feature>
        <callback>siconfigapi.createServiceInstance</callback>
    </item>
    <item>
        <url>/api/tenants/config/service-instances/:uuid</url>
        <method>put</method>
        <feature>siconfig</feature>
        <callback>siconfigapi.updateServiceInstance</callback>
    </item>
    <item>
        <url>/api/tenants/config/service-instance/:id</url>
        <method>delete</method>
        <feature>siconfig</feature>
        <callback>siconfigapi.deleteServiceInstance</callback>
    </item>
    <item>
        <url>/api/tenants/config/service-instance-templates/:id</url>
        <method>get</method>
        <feature>siconfig</feature>
        <callback>siconfigapi.listServiceInstanceTemplates</callback>
    </item>
    <item>
        <url>/api/tenants/config/service-instance-vm</url>
        <method>get</method>
        <feature>siconfig</feature>
        <callback>siconfigapi.getVNCUrl</callback>
    </item>
    <item>
        <url>/api/tenants/config/interface/packet-capture</url>
        <method>post</method>
        <feature>siconfig</feature>
        <callback>siconfigapi.configurePacketCapture4Interface</callback>
    </item>
    <item>
        <url>/api/tenants/config/flow/packet-capture</url>
        <method>post</method>
        <feature>siconfig</feature>
        <callback>siconfigapi.configurePacketCapture4Flow</callback>
    </item>

    <!-- API / Feature definition for Virtual DNS configuration -->
    <!-- 1. List Virtual DNS                 - /api/tenants/config/virtual-DNSs/:id,
                                                 listVirtualDNSs
         2. Create Virtual DNS               - /api/tenants/config/virtual-DNSs,
                                                 createVirtualDNS
         3. Delete Virtual DNS               - /api/tenants/config/virtual-DNS/:id,
                                                 deleteVirtualDNS
         4. Get Virtual DNS                  - /api/tenants/config/virtual-DNS/:id,
                                                 getVirtualDNS
         5. Add Virtual DNS Record           - /api/tenants/config/virtual-DNS/:id/virtual-DNS-records,
                                                 updateVDNSRecordAdd
         6. Delete Virtual DNS Record        - /api/tenants/config/virtual-DNS/:id/virtual-DNS-record/:recordid,
                                                 updateVDNSRecordDelete
         7. Update ipams for Virtual DNS     - /api/tenants/config/virtual-DNS/:id/network-ipams
                                                 updateVDNSIpams 
         8. Update Virtual DNS Record        -
                    /api/tenants/config/virtual-DNS/:id/virtual-DNS-record/:recordid
                        updateVDNSRecordUpdate 
         9. Update Virtual DNS
                    /api/tenants/config/virtual-DNS/:id
                        updateVirtualDNS 
    -->
    <item>
        <url>/api/tenants/config/virtual-DNSs/:id</url>
        <method>get</method>
        <feature>virtualdnsconfig</feature>
        <callback>virtualdnsconfigapi.listVirtualDNSs</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-DNSs</url>
        <method>post</method>
        <feature>virtualdnsconfig</feature>
        <callback>virtualdnsconfigapi.createVirtualDNS</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-DNS/:id</url>
        <method>delete</method>
        <feature>virtualdnsconfig</feature>
        <callback>virtualdnsconfigapi.deleteVirtualDNS</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-DNS/:id</url>
        <method>get</method>
        <feature>virtualdnsconfig</feature>
        <callback>virtualdnsconfigapi.getVirtualDNS</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-DNS/:id/virtual-DNS-records</url>
        <method>post</method>
        <feature>virtualdnsconfig</feature>
        <callback>virtualdnsconfigapi.updateVDNSRecordAdd</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-DNS/:id/virtual-DNS-record/:recordid</url>
        <method>delete</method>
        <feature>virtualdnsconfig</feature>
        <callback>virtualdnsconfigapi.updateVDNSRecordDelete</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-DNS/:id/network-ipams</url>
        <method>put</method>
        <feature>virtualdnsconfig</feature>
        <callback>virtualdnsconfigapi.updateVDNSIpams</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-DNS/:id/virtual-DNS-record/:recordid</url>
        <method>put</method>
        <feature>virtualdnsconfig</feature>
        <callback>virtualdnsconfigapi.updateVDNSRecordUpdate</callback>
    </item>
    <item>
        <url>/api/tenants/config/virtual-DNS/:id</url>
        <method>put</method>
        <feature>virtualdnsconfig</feature>
        <callback>virtualdnsconfigapi.updateVirtualDNS</callback>
    </item>
    <item>
        <url>/api/tenants/config/sandesh/virtual-DNS/:dnsfqn</url>
        <method>get</method>
        <feature>virtualdnsconfig</feature>
        <callback>virtualdnsconfigapi.getVirtualDNSSandeshRecords</callback>
    </item>

    <!-- API / Feature definition for Projects configuration -->
    <!-- 1. List Projects - /api/tenants/config/projects,
                                                 listProjects
            Intergrated projects with user session / token id,
            needs domains once domains are implemented

         2. List Domains - /api/tenants/config/domains,
                                                 listDomains
            Not integrated with Keystone, fetches the
            domain list from API server. Needs to be based
            user session / token id.
    -->
    <item>
        <url>/api/tenants/config/projects</url>
        <method>get</method>
        <feature>projectconfig</feature>
        <callback>projectconfigapi.listProjects</callback>
    </item>
    <item>
        <url>/api/tenants/config/projects/:domain</url>
        <method>get</method>
        <feature>projectconfig</feature>
        <callback>projectconfigapi.listProjects</callback>
    </item>
    <item>
        <url>/api/tenants/config/domains</url>
        <method>get</method>
        <feature>projectconfig</feature>
        <callback>projectconfigapi.listDomains</callback>
    </item>

    <!-- API / Feature definition for Ipam configuration -->
    <!-- 1. List Ipams - /api/tenants/config/ipams,
                                             listIpams
         2. Get Ipam - /api/tenants/config/ipam/:id,
                                             getIpam
         3. Create Ipam - /api/tenants/config/ipams,
                                             createIpam
         4. Delete Ipam - /api/tenants/config/ipam/:id,
                                              deleteIpam
         5. Update Ipam - /api/tenants/config/ipam/:id,
                                              updateIpam
         6. Update DNS -  /api/tenants/config/ipam/:id/option,
                                              updateIpamDns
    -->
    <item>
        <url>/api/tenants/config/ipams</url>
        <method>get</method>
        <feature>ipamconfig</feature>
        <callback>ipamconfigapi.listIpams</callback>
    </item>
    <item>
        <url>/api/tenants/config/ipam/:id</url>
        <method>get</method>
        <feature>ipamconfig</feature>
        <callback>ipamconfigapi.getIpam</callback>
    </item>
    <item>
        <url>/api/tenants/config/ipams</url>
        <method>post</method>
        <feature>ipamconfig</feature>
        <callback>ipamconfigapi.createIpam</callback>
    </item>
    <item>
        <url>/api/tenants/config/ipam/:id</url>
        <method>delete</method>
        <feature>ipamconfig</feature>
        <callback>ipamconfigapi.deleteIpam</callback>
    </item>
    <item>
        <url>/api/tenants/config/ipam/:id</url>
        <method>put</method>
        <feature>ipamconfig</feature>
        <callback>ipamconfigapi.updateIpam</callback>
    </item>
    <item>
        <url>/api/tenants/config/ipam/:id/option</url>
        <method>put</method>
        <feature>ipamconfig</feature>
        <callback>ipamconfigapi.updateIpamDns</callback>
    </item>

    <item>
        <url>/api/admin/reports/query</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>query-engine</feature>
        <callback>qeapi.runGETQuery</callback>
    </item>
    <item>
        <url>/api/admin/reports/query</url>
        <method>post</method>
        <timeout>300000</timeout>
        <feature>query-engine</feature>
        <callback>qeapi.runPOSTQuery</callback>
    </item>
    <item>
        <url>/api/admin/reports/query/export</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>query-engine</feature>
        <callback>qeapi.exportQueryResult</callback>
    </item>
    <item>
        <url>/api/admin/reports/query/queue</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>query-engine</feature>
        <callback>qeapi.getQueryQueue</callback>
    </item>
    <item>
        <url>/api/admin/reports/query/flow-classes</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>query-engine</feature>
        <callback>qeapi.getFlowClasses</callback>
    </item>
    <item>
        <url>/api/admin/reports/query/chart-data</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>query-engine</feature>
        <callback>qeapi.getChartData</callback>
    </item>
    <item>
        <url>/api/admin/reports/query</url>
        <method>delete</method>
        <feature>query-engine</feature>
        <callback>qeapi.deleteQueryCache4Ids</callback>
    </item>
    <item>
        <url>/api/admin/reports/query/queue</url>
        <method>delete</method>
        <feature>query-engine</feature>
        <callback>qeapi.deleteQueryCache4Queue</callback>
    </item>
    <item>
        <url>/api/admin/tables</url>
        <method>get</method>
        <feature>query-engine</feature>
        <callback>qeapi.getTables</callback>
    </item>
    <item>
        <url>/api/admin/table/values/:tableName/:column</url>
        <method>get</method>
        <feature>query-engine</feature>
        <callback>qeapi.getColumnValues</callback>
    </item>
    <item>
        <url>/api/admin/table/schema/:tableName</url>
        <method>get</method>
        <feature>query-engine</feature>
        <callback>qeapi.getTableSchema</callback>
    </item>
    <item>
        <url>/api/admin/object-ids/:objectType</url>
        <method>get</method>
        <feature>query-engine</feature>s
        <callback>qeapi.getObjectIds</callback>
    </item>
    <!-- Monitoring Overview Details -->
    <item>
        <url>/api/tenant/networking/domain/summary</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>tenantapi.getNetworkDomainSummary</callback>
    </item>
    <item>
        <url>/api/tenant/networking/network/details</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>tenantapi.getNetworkDetails</callback>
    </item> 
    <item>
      <url>/api/tenant/networking/domain/stats/top</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>monitoring</feature>
        <callback>nwMonApi.getTopNetworkDetailsByDomain</callback>
    </item>
    <item>
      <url>/api/tenant/networking/project/stats/top</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>monitoring</feature>
        <callback>nwMonApi.getTopNetworkDetailsByProject</callback>
    </item>
    <item>
        <url>/api/tenant/networking/flow-series/vn</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>monitoring</feature>
        <callback>nwMonApi.getFlowSeriesByVN</callback>
    </item>
    <item>
        <url>/api/tenant/networking/network/traffic-stat</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>monitoring</feature>
        <callback>nwMonApi.getTrafficStatBtnVns</callback>
    </item>
    <item>
        <url>/api/tenant/networking/network/stats/top</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>monitoring</feature>
        <callback>nwMonApi.getNetworStats</callback>
    </item> 
    <item>
        <url>/api/tenant/networking/vm/ip-list</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>nwMonApi.getVMFloatingIPList</callback>
    </item>
    <item>
        <url>/api/tenant/networking/vn/summary</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>nwMonApi.getVNStatsSummary</callback>
    </item>
    <item>
        <url>/api/tenant/networking/virtual-network/summary</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>nwMonApi.getVirtualNetworksSummary</callback>
    </item>
    <item>
        <url>/api/tenant/networking/virtual-machine/summary</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>nwMonApi.getVirtualMachinesSummary</callback>
    </item>
    <item>
        <url>/api/tenant/networking/vm/stats/top</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>monitoring</feature>
        <callback>nwMonApi.getTopNwDetailsByVM</callback>
    </item>
    <item>
        <url>/api/tenant/networking/flow-series/vm</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>monitoring</feature>
        <callback>nwMonApi.getFlowSeriesByVM</callback>
    </item>
    <item>
        <url>/api/tenant/networking/vm/stats/summary</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>monitoring</feature>
        <callback>nwMonApi.getVMStatsSummary</callback>
    </item>        
    <item>
        <url>/api/tenant/networking/network/connected/stats/summary</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>monitoring</feature>
        <callback>nwMonApi.getNetworkStatsSummary</callback>
    </item>        
    <item>
        <url>/api/tenant/networking/network/connected/stats/top</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>monitoring</feature>
        <callback>nwMonApi.getConnectedNWsStatsByType</callback>
    </item>
    <item>
        <url>/api/tenant/networking/stats/top/details</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>monitoring</feature>
        <callback>nwMonApi.getNetworkTopStatsDetails</callback>
    </item>
    <item>
        <url>/api/tenant/networking/network/connected/stats/details</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>monitoring</feature>
        <callback>nwMonApi.getAllConnNetStatDetails</callback>
    </item>
    <item>
        <url>/api/tenant/networking/network/flow-series/port</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>monitoring</feature>
        <callback>nwMonApi.getPortLevelFlowSeries</callback>
    </item>
    <item>
        <url>/api/tenant/networking/network/flows</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>nwMonApi.getFlowEntriesByFlowTuple</callback>
    </item>
    <item>
        <url>/api/tenant/networking/flow-series/cpu</url>
        <method>get</method>
        <timeout>300000</timeout>
        <feature>monitoring</feature>
        <callback>nwMonApi.getFlowSeriesByCPU</callback>
    </item>
    <item>
        <url>/api/tenant/networking/virtual-machines</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>nwMonApi.getVMDetails</callback>
    </item>
    <item>
        <url>/api/tenant/networking/virtual-machines/details</url>
        <method>post</method>
        <feature>monitoring</feature>
        <callback>nwMonApi.getInstanceDetails</callback>
    </item> 
    <item>
        <url>/api/tenant/networking/virtual-networks/details</url>
        <method>post</method>
        <feature>monitoring</feature>
        <callback>nwMonApi.getVirtualNetworksDetails</callback>
    </item> 
    <item>
        <url>/api/tenant/networking/virtual-machines/details</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>nwMonApi.getInstanceDetails</callback>
    </item> 
    <item>
        <url>/api/service/networking/ping</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>tenantapi.doPing</callback>
    </item>
    <item>
        <url>/api/service/networking/orchestration/model</url>
        <method>get</method>
        <feature>orchestration</feature>
        <callback>adminapi.getOrchestrationPluginModel</callback>
    </item>
    <item>
        <url>/api/service/networking/web-server-info</url>
        <method>get</method>
        <feature>monitoring</feature>
        <callback>adminapi.getWebServerInfo</callback>
    </item>
    <item>
        <url>/api/admin/config/get-data</url>
        <method>get</method>
        <feature>orchestration</feature>
        <callback>adminapi.getApiServerDataByPage</callback>
    </item>
    <item>
        <url>/api/admin/webconfig/:type/:variable</url>
        <method>get</method>
        <feature>setting</feature>
        <callback>adminapi.getWebConfigValueByName</callback>
    </item>
    <item>
        <url>/api/service/networking/get-network-reachable-ip</url>
        <method>post</method>
        <feature>monitoring</feature>
        <callback>adminapi.getReachableIP</callback>
    </item>
    <item>
        <url>/api/query/cassandra/keys/:table</url>
        <method>get</method>
        <feature>setting</feature>
        <callback>cdbqueryapi.listKeys4Table</callback>
    </item>
    <item>
        <url>/api/query/cassandra/values/:table/:key</url>
        <method>get</method>
        <feature>setting</feature>
        <callback>cdbqueryapi.listValues4Key</callback>
    </item>
    <item>
        <url>/api/query/cassandra/key/:table/:key</url>
        <method>delete</method>
        <feature>setting</feature>
        <callback>cdbqueryapi.deleteValue4Key</callback>
    </item>
    <item>
        <url>/api/query/cassandra/value/:table/:key/:value</url>
        <method>delete</method>
        <feature>setting</feature>
        <callback>cdbqueryapi.deleteValue4Key</callback>
    </item>
    <item>
        <url>/api/service/networking/device-status/:ip</url>
        <method>post</method>
        <feature>monitoring</feature>
        <callback>sshapi.getServiceStatus</callback>
    </item>
    <item>
        <url>/proxy</url>
        <!-- Proxy URL format:
            /proxy?proxyURL=<URL>&<argument-list>
        -->
        <method>get</method>
        <feature>proxy</feature>
        <callback>proxyApi.forwardProxyRequest</callback>
    </item>
</urlLists>
